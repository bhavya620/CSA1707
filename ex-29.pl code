% --- Knowledge Base ---
% We will model symptoms as facts that can be added dynamically.

:- dynamic(known/1).

% Diseases and their rules (if-then).
rule(cold,     [cough, sneezing, sore_throat, runny_nose]).
rule(flu,      [fever, cough, headache, body_ache, fatigue]).
rule(malaria,  [fever, chills, sweating, headache, nausea]).
rule(typhoid,  [fever, abdominal_pain, diarrhea, weakness]).
rule(covid19,  [fever, cough, loss_of_taste, loss_of_smell, fatigue, breathlessness]).

% --- Forward Chaining Engine ---
% Check if all symptoms in a rule are satisfied
satisfied([]).
satisfied([Symptom | Rest]) :-
    known(Symptom),
    satisfied(Rest).

% Inference: If symptoms match, conclude disease
forward_chain(Disease) :-
    rule(Disease, Symptoms),
    satisfied(Symptoms).

% Ask user for a symptom if not already known
ask(Symptom) :-
    known(Symptom), !.    % already known
ask(Symptom) :-
    format('Do you have ~w? (yes/no): ', [Symptom]),
    read(Reply),
    (Reply == yes -> assertz(known(Symptom)) ; true).

% Check all symptoms for a disease by asking the user
check_symptoms([]).
check_symptoms([S | Rest]) :-
    ask(S),
    check_symptoms(Rest).

% Diagnose interactively
diagnose :-
    retractall(known(_)),   % clear old facts
    rule(Disease, Symptoms),
    check_symptoms(Symptoms),
    forward_chain(Disease),
    format('~nBased on your symptoms, you may have: ~w~n', [Disease]),
    fail.  % force backtracking to find other possible diseases
diagnose.
