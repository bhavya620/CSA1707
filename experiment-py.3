from collections import deque

def water_jug_solver(jug1, jug2, target):
    visited = set()
    queue = deque([(0, 0)])  # (amount in jug1, amount in jug2)

    while queue:
        x, y = queue.popleft()
        if (x, y) in visited:
            continue
        visited.add((x, y))

        print(f"Jug1: {x}, Jug2: {y}")

        if x == target or y == target:
            print("\nReached the target!")
            return True

        # All possible operations:
        next_states = [
            (jug1, y),     # Fill Jug1
            (x, jug2),     # Fill Jug2
            (0, y),        # Empty Jug1
            (x, 0),        # Empty Jug2
            (x - min(x, jug2 - y), y + min(x, jug2 - y)),  # Pour Jug1 → Jug2
            (x + min(y, jug1 - x), y - min(y, jug1 - x))   # Pour Jug2 → Jug1
        ]

        for state in next_states:
            if state not in visited:
                queue.append(state)

    print("\nNo solution exists.")
    return False


# -------- User Input --------
j1 = int(input("Enter capacity of Jug1: "))
j2 = int(input("Enter capacity of Jug2: "))
target = int(input("Enter target amount: "))

water_jug_solver(j1, j2, target)
