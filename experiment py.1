from collections import deque

# Function to get possible moves of the blank (0)
def get_neighbors(state):
    neighbors = []
    zero_index = state.index(0)
    x, y = divmod(zero_index, 3)
    moves = [(-1,0),(1,0),(0,-1),(0,1)]  # up, down, left, right

    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_index = nx * 3 + ny
            new_state = list(state)
            new_state[zero_index], new_state[new_index] = new_state[new_index], new_state[zero_index]
            neighbors.append(tuple(new_state))
    return neighbors

# BFS to solve puzzle
def bfs(start, goal):
    queue = deque([(start, [])])
    visited = set([start])
    while queue:
        state, path = queue.popleft()
        if state == goal:
            return path + [state]
        for neighbor in get_neighbors(state):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [state]))
    return None

# User input
print("Enter initial state (use 0 for blank):")
start = tuple(map(int, input().split()))
print("Enter goal state (use 0 for blank):")
goal = tuple(map(int, input().split()))

solution = bfs(start, goal)

if solution:
    print("\nSolution found in", len(solution)-1, "moves:")
    for step in solution:
        for i in range(0, 9, 3):
            print(step[i:i+3])
        print()
else:
    print("No solution exists.")
